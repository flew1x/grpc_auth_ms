syntax = "proto3";

// Package grpc_api contains API definitions for gRPC service.
package grpc_api;

import "google/api/annotations.proto";

option go_package = "./internal/api/grpc_api";

// Auth is a service that provides methods for user authentication.
service Auth {
    // Register creates a new user and returns a pair of access and refresh tokens.
    rpc Register (RegisterRequest) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/v1/auth/register"
            body: "*"
        };
    }

    // Login logs in an existing user and returns a pair of access and refresh tokens.
    rpc Login (LoginRequest) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/v1/auth/login"
            body: "*"
        };
    }

    // Refresh returns a new pair of access and refresh tokens based on the provided refresh token.
    rpc Refresh (RefreshRequest) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/v1/auth/refresh"
            body: "*"
        };
    }

    // CheckJWT checks if the provided JWT token is valid and returns user ID.
    rpc CheckJWT (CheckJWTRequest) returns (CheckJWTResponse) {
        option (google.api.http) = {
            post: "/v1/auth/check"
            body: "*"
        };
    }
}

// RegisterRequest is a request for the Register method.
message RegisterRequest {
    // Email is an optional email address of the user.
    string email = 1;

    // Password is a password of the user.
    string password = 2;
}

// LoginRequest is a request for the Login method.
message LoginRequest {
    // Email is an optional email address of the user.
    string email = 1;

    // Password is a password of the user.
    string password = 2;
}

// AuthResponse is a response for the Register and Login methods.
message AuthResponse {
    // AccessToken is an access token that provides access to protected resources.
    string access_token = 1;

    // RefreshToken is a refresh token that can be used to get a new pair of access and refresh tokens.
    string refresh_token = 2;

    // Role is an optional role of the user.
    string role = 3;
}

// RefreshRequest is a request for the Refresh method.
message RefreshRequest {
    // RefreshToken is a refresh token that was returned by the Login or Register methods.
    string refresh_token = 1;

    // Role is an optional role of the user.
    string role = 2;
}

// RefreshResponse is a response for the Refresh method.
message RefreshResponse {
    // AccessToken is an access token that provides access to protected resources.
    string access_token = 1;

    // RefreshToken is a refresh token that can be used to get a new pair of access and refresh tokens.
    string refresh_token = 2;
}

// CheckJWTRequest is a request for the CheckJWT method.
message CheckJWTRequest {
    // Token is a JWT token that was returned by the Login or Register methods.
    string token = 1;

    // Role is an optional role of the user.
    string role = 2;
}

// CheckJWTResponse is a response for the CheckJWT method.
message CheckJWTResponse {
    // Valid is true if the provided token is valid.
    bool valid = 1;

    // UserID is the ID of the user that the token belongs to.
    string user_id = 2;
}

